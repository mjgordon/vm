(cl:in-package :opcodes)

(cl:defun get-bytecodes-raw()
  "Returns a tree of the basic opcodes and their bytecode counterparts"
  '((OPCODES::X #x0)
    (OPCODES::Y #x1)
    (OPCODES::PC #x2)
    (OPCODES::MEM #x3)
    (OPCODES::IO #x4)
    (OPCODES::RSTK #x5)
    (OPCODES::LIT #x6)
    (OPCODES::ADD #x7)
    (OPCODES::SUB #x8)
    (OPCODES::PUSH #x9)
    (OPCODES::POP #xA)
    (OPCODES::PEEK #xB)
    (OPCODES::COND #xC)
    (OPCODES::NOR #xD)
    (OPCODES::RSH #xE)
    (OPCODES::LSH #xF)))


(cl:defun get-dictionary ()
  "Returns the raw data of the expansion dictionary. Gets closured into the dictionary expander function"
  ;; DEFINITIONS
  '(
    ;; STACK OPERATIONS
    (DROP
     (LIT POP))
    (DROP1
     (RSTK POP DROP RSTK PUSH))
    (DUP
     (LIT PUSH 0 PEEK DROP1))
    (SWAP
     (PEEK RSTK POP POP DROP RSTK PUSH PUSH))
    (CONST3_0
     (LIT PUSH 0 PUSH 0 PUSH 0))
    (CONST4_0
     (LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0))
    (CONST3_1
     (LIT PUSH 0 PUSH 0 PUSH 1))
    (CONST4_1
     (LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1))
    (PEEK2
     (RSTK POP PEEK RSTK PUSH SWAP))
    (PEEK3
     (RSTK POP POP PEEK RSTK PUSH SWAP RSTK PUSH SWAP))
    (PUSH2
     (LIT PUSH)
     next-to-nb 2)
    (PUSH3
     (LIT PUSH)
     next-to-nb 3)
    (PUSH4
     (LIT PUSH)
     next-to-nb 4)
    ;; LOGIC
    (TRUE
     (LIT PUSH >0 COND
      LIT PUSH 15
      GOTO >1
      %0
      LIT PUSH 0
      %1)
     local-labels 2)
    (BIN
     (LIT PUSH >0 COND
      LIT PUSH 1
      GOTO >1
      %0
      LIT PUSH 0
      %1)
     local-labels 2)
    (AND
     (RSTK POP DUP NOR PUSH DUP NOR NOR))
    (OR
     (NOR DUP NOR))
    (NOT
     (DUP NOR))
    (ZERO2
     (ADD POP PUSH POP))
    ;; MATH : COMPARISON
    (EQUAL3
     (PEEK3 SUB POP TRUE NOT LIT PUSH >0 COND
      PEEK3 SUB POP TRUE NOT LIT PUSH >1 COND
      PEEK3 SUB POP TRUE NOT LIT PUSH >2 COND
      DROP DROP DROP LIT PUSH 15 GOTO >3
      %0 DROP %1 DROP %2 DROP DROP DROP LIT PUSH 0
      %3)
     local-labels 4)
    ;; MATH : ADDITION
    (ADDU11
     (ADD POP RSTK POP ADD PUSH))
    (ADD21
     (ADDU11
      ADD POP RSTK PUSH))
    (ADD22
     (SWAP RSTK POP ADD21 RSTK PUSH SWAP RSTK POP ADD POP RSTK PUSH))
    (ADD31
     (ADDU11 ADDU11
      ADD POP RSTK PUSH PUSH))
    (ADDC3_1
     (LIT PUSH 1 ADD31))
    (ADDC4_1
     (LIT PUSH 1 ADDU11 ADDU11 ADDU11
      ADD POP RSTK PUSH PUSH PUSH))

    ;; MATH : SUBTRACTION
    (SUB21
     (SUB POP RSTK POP SUB PUSH SUB POP RSTK PUSH))
    (SUB22
     (SWAP RSTK POP SUB21 RSTK PUSH SWAP SUB PUSH RSTK POP POP SUB POP RSTK PUSH LIT PUSH 0
      SUB PUSH RSTK PUSH ADD POP SUB POP DROP))
    (SUB31
     (SUB POP RSTK POP SUB PUSH
      SUB POP RSTK POP SUB PUSH
      SUB POP RSTK PUSH PUSH))
    (SUB33
     (PEEK2 RSTK POP POP POP DROP RSTK PUSH PUSH SUB22
      RSTK PUSH PEEK2 PEEK2 RSTK POP POP POP DROP DROP SUB PUSH POP RSTK PUSH SUB POP RSTK PUSH PUSH))
    ;; MATH : MULTIPLICATION
    (MULT
     (RSTK POP POP LIT PUSH 0 PUSH 0
      %0 RSTK PUSH DUP RSTK PUSH DUP LIT PUSH >1 COND
      LIT PUSH 1 SUB POP RSTK POP POP ADD POP RSTK POP ADD PUSH POP RSTK PUSH GOTO >0
      %1 DROP DROP DROP)
     local-labels 2)
    (MULT21
     (RSTK POP SWAP RSTK PUSH DUP RSTK POP MULT
      PEEK2 RSTK POP POP POP DROP RSTK PUSH PUSH PUSH PUSH MULT
      RSTK POP ADD POP
      RSTK POP ADD PUSH
      ADD POP RSTK PUSH PUSH))
    (MULT22
     (RSTK POP PEEK2 PEEK2 RSTK POP POP MULT21
      RSTK PUSH PUSH PUSH MULT21
      RSTK POP POP SWAP RSTK POP ADD21
      RSTK PUSH PUSH ADD21
      RSTK PUSH))
    ;; MATH : DIVISION
    (DIV
     (DUP LIT PUSH >1 COND
      DUP RSTK POP POP POP LIT PUSH 0
      RSTK PUSH PUSH
      %0
      SUB POP RSTK POP SUB PUSH TRUE NOT LIT PUSH >2 COND
      LIT PUSH 1 ADD POP RSTK PUSH PUSH DUP RSTK POP GOTO >0
      %1
      DROP DROP LIT PUSH 0 PUSH 0 PUSH 1 GOTO >3
      %2
      RSTK PUSH PUSH DROP DROP LIT PUSH 1 PUSH 0
      %3
      SUB POP DROP)
     local-labels 4)
    (DIV21
     (DUP LIT PUSH >1 COND
      DUP RSTK POP POP POP POP LIT PUSH 0 PUSH 0 RSTK PUSH PUSH PUSH
      %0
      SUB21 RSTK POP POP SUB PUSH TRUE NOT LIT PUSH >2 COND
      LIT PUSH 1 ADD21 RSTK PUSH PUSH PUSH DUP RSTK POP GOTO >0
      %1
      DROP DROP DROP LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 GOTO >3
      %2
      RSTK PUSH PUSH PUSH DROP DROP DROP LIT PUSH 1 PUSH 0
      %3
      SUB POP DROP)
     local-labels 4)
    (DIV22
     (PEEK PEEK ZERO2 LIT PUSH >1 COND
      PEEK PEEK RSTK POP POP POP POP POP POP LIT PUSH 0 PUSH 0 RSTK PUSH PUSH PUSH PUSH
      %0
      SUB22 RSTK POP POP SUB PUSH TRUE NOT LIT PUSH >2 COND
      LIT PUSH 1 ADD21 RSTK PUSH PUSH PUSH PUSH PEEK PEEK RSTK POP POP GOTO >0
      %1
      DROP DROP DROP DROP
      LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 GOTO >3
      %2
      RSTK PUSH PUSH PUSH PUSH DROP DROP DROP DROP LIT PUSH 1 PUSH 0
      %3
      SUB POP DROP)
     local-labels 4)
    (DIV31
     (DUP LIT PUSH >1 COND
      DUP RSTK POP POP POP POP POP CONST3_0 RSTK PUSH PUSH PUSH PUSH
      %0
      SUB31 RSTK POP POP POP SUB PUSH TRUE NOT LIT PUSH >2 COND
      ADDC3_1 RSTK PUSH PUSH PUSH PUSH DUP RSTK POP GOTO >0
      %1
      DROP DROP DROP DROP LIT PUSH 0 CONST4_1 GOTO >3
      %2
      RSTK PUSH PUSH PUSH PUSH DROP DROP DROP DROP LIT PUSH 1 PUSH 0
      %3
      SUB POP DROP)
     local-labels 4)
    ;; MATH : MODULO
    (MOD
     (DUP LIT PUSH >1 COND
      DUP RSTK POP
      %0
      SUB POP SUB PUSH TRUE NOT LIT PUSH >2 COND
      RSTK PUSH DUP RSTK POP GOTO >0
      %1 RSTK POP
      %2 RSTK PUSH ADD POP)
     local-labels 3)

    (MOD21
     (DUP LIT PUSH >1 COND
      DUP RSTK POP
      %0
      SUB21 SUB PUSH TRUE NOT LIT PUSH >2 COND
      RSTK PUSH DUP RSTK POP GOTO >0
      %1 RSTK POP
      %2 RSTK PUSH ADD21)
     local-labels 3)
    
    (MOD22
     (PEEK PEEK ZERO2 LIT PUSH >1 COND
      PEEK PEEK RSTK POP POP
      %0
      SUB22 SUB PUSH TRUE NOT LIT PUSH >2 COND
      RSTK PUSH PUSH PEEK PEEK RSTK POP POP GOTO >0
      %1 RSTK POP POP
      %2 RSTK PUSH PUSH ADD22)
     local-labels 3)
    (MOD31
     (DUP LIT PUSH >1 COND
      DUP RSTK POP
      %0
      SUB31 SUB PUSH TRUE NOT LIT PUSH >2 COND
      RSTK PUSH DUP RSTK POP GOTO >0
      %1 RSTK POP
      %2 RSTK PUSH ADD31)
     local-labels 3)
    ;; MATH : NEGATION
    (NEG
     (NOT LIT PUSH 1 ADD POP))
    (NEG8
     (RSTK POP NOT
      RSTK PUSH NOT
      LIT PUSH 1 ADD21))
    (NEG12
     (RSTK POP POP NOT
      RSTK PUSH NOT
      RSTK PUSH NOT
      ADDC3_1))
    (NEG16
     (RSTK POP POP POP NOT
      RSTK PUSH NOT
      RSTK PUSH NOT
      RSTK PUSH NOT
      ADDC4_1))
    ;; PROGRAM FLOW
    (GOTO
     (LIT PUSH)
     next-token
     (PC POP))
    (CALL
     (LIT PUSH)
     offset-label 23
     (RSTK POP POP POP POP GOTO))	      
    (RET
     (RSTK PUSH PUSH PUSH PUSH PC POP))
    ;; IO
    (OUT
     (LIT PUSH 1 IO POP POP))
    (OUT8
     (LIT PUSH 2 IO POP POP POP))
    (OUT12
     (LIT PUSH 3 IO POP POP POP POP))
    (OUT16
     (LIT PUSH 4 IO POP POP POP POP POP))
    ))
