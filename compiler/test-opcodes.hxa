# ==============================================
# RSTK (and addition flag)
# Calls all other tests sequentially with the CALL expansion; 
# each test ends with a RET expansion, then GOTO's the end of the file

#CALL >COLOR_TEST
#CALL >PC_TEST
#CALL >ADD_TEST
#CALL >SUB_TEST
#CALL >PEEK_TEST
#CALL >NOR_TEST
CALL >MULT_TEST

GOTO >END

# ==============================================
# COLOR MODE + MOVE COMMAND
# Draws breshenham lines in all quadrants, in all available colors
# Color 0 is black so will not be visible. 

# Go to start
@COLOR_TEST
LIT
PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 6 PUSH 0
Y POP
X POP
MOVE

# LINE UP
LIT
PUSH 1
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 0 COLOR POP
Y POP
X POP
MOVE

# LINE UP RIGHT
LIT
PUSH 1
PUSH 0 PUSH 6 PUSH 0
PUSH 0 PUSH 2 PUSH 0
PUSH 1 COLOR POP
Y POP
X POP
MOVE

# LINE RIGHT
LIT
PUSH 1
PUSH 0 PUSH 8 PUSH 0
PUSH 0 PUSH 2 PUSH 0
PUSH 2 COLOR POP
Y POP
X POP
MOVE

# LINE DOWN RIGHT
LIT
PUSH 1
PUSH 0 PUSH 10 PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 3 COLOR POP
Y POP
X POP
MOVE

# LINE DOWN
LIT
PUSH 1
PUSH 0 PUSH 10 PUSH 0
PUSH 0 PUSH 6 PUSH 0
PUSH 4 COLOR POP
Y POP
X POP
MOVE

# LINE DOWN LEFT
LIT
PUSH 1
PUSH 0 PUSH 8 PUSH 0
PUSH 0 PUSH 8 PUSH 0
PUSH 5 COLOR POP
Y POP
X POP
MOVE

# LINE LEFT
LIT
PUSH 1
PUSH 0 PUSH 6 PUSH 0
PUSH 0 PUSH 8 PUSH 0
PUSH 6 COLOR POP
Y POP
X POP
MOVE

# LINE UP LEFT
LIT
PUSH 1
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 6 PUSH 0
PUSH 7 COLOR POP
Y POP
X POP
MOVE

# MOVE TO NEW POSITION
LIT
PUSH 0
PUSH 0 PUSH 14 PUSH 0
PUSH 0 PUSH 6 PUSH 0
Y POP
X POP
MOVE

# COLOR 8 : UP
LIT
PUSH 1
PUSH 0 PUSH 14 PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 8 COLOR POP
Y POP
X POP
MOVE

# COLOR 9 : UP RIGHT
LIT
PUSH 1
PUSH 1 PUSH 0 PUSH 0
PUSH 0 PUSH 2 PUSH 0
PUSH 9 COLOR POP
Y POP
X POP
MOVE

# COLOR 10 : RIGHT
LIT
PUSH 1
PUSH 1 PUSH 2 PUSH 0
PUSH 0 PUSH 2 PUSH 0
PUSH 10 COLOR POP
Y POP
X POP
MOVE

# COLOR 11 : DOWN RIGHT
LIT
PUSH 1
PUSH 1 PUSH 4 PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 11 COLOR POP
Y POP
X POP
MOVE

# COLOR 12 : DOWN
LIT
PUSH 1
PUSH 1 PUSH 4 PUSH 0
PUSH 0 PUSH 6 PUSH 0
PUSH 12 COLOR POP
Y POP
X POP
MOVE

# COLOR 13 : DOWN LEFT
LIT
PUSH 1
PUSH 1 PUSH 2 PUSH 0
PUSH 0 PUSH 8 PUSH 0
PUSH 13 COLOR POP
Y POP
X POP
MOVE

# COLOR 14 : LEFT
LIT
PUSH 1
PUSH 1 PUSH 0 PUSH 0
PUSH 0 PUSH 8 PUSH 0
PUSH 14 COLOR POP
Y POP
X POP
MOVE

# COLOR 15 : UP LEFT
LIT
PUSH 1
PUSH 0 PUSH 14 PUSH 0
PUSH 0 PUSH 6 PUSH 0
PUSH 15 COLOR POP
Y POP
X POP
MOVE

RET


# ==============================================
# PC Mode
# Sets color to green, moves PC to label past instruction to turn color red, draws line.

@PC_TEST
LIT PUSH 10 COLOR POP
GOTO >PC_TEST_B
LIT PUSH 9 COLOR POP
@PC_TEST_B
LIT
PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 10 PUSH 0
Y POP
X POP
MOVE
LIT
PUSH 1
PUSH 0 PUSH 6 PUSH 0
PUSH 0 PUSH 10 PUSH 0
Y POP
X POP
MOVE

RET


# ==============================================
# ADD mode and addition flag
# Move to position, put a color into memory and copy it out again, move two pixels over and repeat
# Uses cond to know when to end

@ADD_TEST
LIT
PUSH 10
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 10 PUSH 4
Y POP
X POP
DUP IO POP MEM POP
@ADD_TEST_B
MEM PUSH X PUSH
LIT PUSH 2 ADD POP
X POP MEM POP
ADD PUSH
LIT PUSH >ADD_TEST_B
COND

RET

# ==============================================
# SUB mode and subtraction flag
# Similar to ADD test, but starts at end of line of dots and works backwards. Uses cond.

@SUB_TEST
LIT
PUSH 10
PUSH 0 PUSH 4 PUSH 15
PUSH 0 PUSH 10 PUSH 8
Y POP
X POP
DUP IO POP MEM POP
@SUB_TEST_B
MEM PUSH X PUSH
LIT PUSH 2 SUB POP
X POP MEM POP
SUB PUSH
LIT PUSH >SUB_TEST_B
COND

RET


# ==============================================
# PEEK Command
# Pushes a sequence of colors, then uses PEEK to add that backwards onto the stack

@PEEK_TEST
LIT
PUSH 8 PUSH 9 PUSH 10 PUSH 11 PUSH 12 PUSH 13 PUSH 14 PUSH 15
PEEK 0 PEEK 2 PEEK 4 PEEK 6 PEEK 8 PEEK 10 PEEK 12 PEEK 14
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 10 PUSH 12
Y POP
X POP
@PEEK_TEST_B
MEM POP
X PUSH
LIT PUSH 1 ADD POP
X POP
ADD PUSH
LIT PUSH >PEEK_TEST_B
COND

RET


# ==============================================
# NOR command and logic folds
# Lays down the expected results on one line, puts test case results for
# nor, not, or, and on the next line

@NOR_TEST
LIT
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 11 PUSH 0
Y POP
X POP

LIT
PUSH 9
PUSH 15 PUSH 0 PUSH 0 PUSH 0
PUSH 9
PUSH 15 PUSH 15 PUSH 15 PUSH 0
PUSH 9
PUSH 0 PUSH 15
PUSH 9
PUSH 0 PUSH 0 PUSH 0 PUSH 15
PUSH 9
MEM POP LIT PUSH 0 PUSH 4 PUSH 1 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 2 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 3 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 4 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 5 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 6 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 7 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 8 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 9 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 10 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 11 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 12 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 13 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 14 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 15 X POP
MEM POP LIT PUSH 0 PUSH 5 PUSH 0 X POP
MEM POP LIT PUSH 0 PUSH 5 PUSH 1 X POP
MEM POP LIT PUSH 0 PUSH 5 PUSH 2 X POP
MEM POP LIT PUSH 0 PUSH 5 PUSH 3 X POP

LIT
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 11 PUSH 1
Y POP
X POP

LIT PUSH 9
MEM POP LIT PUSH 0 PUSH 4 PUSH 1 X POP
LIT PUSH 0 PUSH 0 NOR
MEM POP LIT PUSH 0 PUSH 4 PUSH 2 X POP
LIT PUSH 0 PUSH 15 NOR
MEM POP LIT PUSH 0 PUSH 4 PUSH 3 X POP
LIT PUSH 15 PUSH 0 NOR
MEM POP LIT PUSH 0 PUSH 4 PUSH 4 X POP
LIT PUSH 15 PUSH 15 NOR
MEM POP LIT PUSH 0 PUSH 4 PUSH 5 X POP
LIT PUSH 9
MEM POP LIT PUSH 0 PUSH 4 PUSH 6 X POP
LIT PUSH 0 NOT
MEM POP LIT PUSH 0 PUSH 4 PUSH 7 X POP
LIT PUSH 15 NOT
MEM POP LIT PUSH 0 PUSH 4 PUSH 8 X POP
LIT PUSH 9
MEM POP LIT PUSH 0 PUSH 4 PUSH 9 X POP
LIT PUSH 0 PUSH 0 OR
MEM POP LIT PUSH 0 PUSH 4 PUSH 10 X POP
LIT PUSH 0 PUSH 15 OR
MEM POP LIT PUSH 0 PUSH 4 PUSH 11 X POP
LIT PUSH 15 PUSH 0 OR
MEM POP LIT PUSH 0 PUSH 4 PUSH 12 X POP
LIT PUSH 15 PUSH 15 OR
MEM POP LIT PUSH 0 PUSH 4 PUSH 13 X POP
LIT PUSH 9
MEM POP LIT PUSH 0 PUSH 4 PUSH 14 X POP
LIT PUSH 0 PUSH 0 AND
MEM POP LIT PUSH 0 PUSH 4 PUSH 15 X POP
LIT PUSH 0 PUSH 15 AND
MEM POP LIT PUSH 0 PUSH 5 PUSH 0 X POP
LIT PUSH 15 PUSH 0 AND
MEM POP LIT PUSH 0 PUSH 5 PUSH 1 X POP
LIT PUSH 15 PUSH 15 AND
MEM POP LIT PUSH 0 PUSH 5 PUSH 2 X POP
LIT PUSH 9
MEM POP LIT PUSH 0 PUSH 5 PUSH 3 X POP

RET


@MULT_TEST

LIT PUSH 0 PUSH 0 MULT IO POP POP

RET

@END

