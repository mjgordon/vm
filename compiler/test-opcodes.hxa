# ==============================================
# RSTK (and addition flag)
# 0 
# Calls all other tests sequentially with what will be the defs for
# calls and exits, then goes to end label

CALL >COLOR_TEST
CALL >PC_TEST
CALL >MEM_TEST
CALL >IO_TEST
CALL >SUB_TEST

GOTO >END

# ==============================================
# COLORS + MOVE
# 0 1 2 7 A B F
# Draws breshenham lines in all quadrants, in all available colors

# Go to start
@COLOR_TEST
LIT
PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 6 PUSH 0
Y POP
X POP
MOVE

# LINE UP
LIT
PUSH 1
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 0 COLOR POP
Y POP
X POP
MOVE

# LINE UP RIGHT
LIT
PUSH 1
PUSH 0 PUSH 6 PUSH 0
PUSH 0 PUSH 2 PUSH 0
PUSH 1 COLOR POP
Y POP
X POP
MOVE

# LINE RIGHT
LIT
PUSH 1
PUSH 0 PUSH 8 PUSH 0
PUSH 0 PUSH 2 PUSH 0
PUSH 2 COLOR POP
Y POP
X POP
MOVE

# LINE DOWN RIGHT
LIT
PUSH 1
PUSH 0 PUSH 10 PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 3 COLOR POP
Y POP
X POP
MOVE

# LINE DOWN
LIT
PUSH 1
PUSH 0 PUSH 10 PUSH 0
PUSH 0 PUSH 6 PUSH 0
PUSH 4 COLOR POP
Y POP
X POP
MOVE

# LINE DOWN LEFT
LIT
PUSH 1
PUSH 0 PUSH 8 PUSH 0
PUSH 0 PUSH 8 PUSH 0
PUSH 5 COLOR POP
Y POP
X POP
MOVE

# LINE LEFT
LIT
PUSH 1
PUSH 0 PUSH 6 PUSH 0
PUSH 0 PUSH 8 PUSH 0
PUSH 6 COLOR POP
Y POP
X POP
MOVE

# LINE UP LEFT
LIT
PUSH 1
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 6 PUSH 0
PUSH 7 COLOR POP
Y POP
X POP
MOVE

# MOVE TO NEW POSITION
LIT
PUSH 0
PUSH 0 PUSH 14 PUSH 0
PUSH 0 PUSH 6 PUSH 0
Y POP
X POP
MOVE

# COLOR 8 : UP
LIT
PUSH 1
PUSH 0 PUSH 14 PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 8 COLOR POP
Y POP
X POP
MOVE

# COLOR 9 : UP RIGHT
LIT
PUSH 1
PUSH 1 PUSH 0 PUSH 0
PUSH 0 PUSH 2 PUSH 0
PUSH 9 COLOR POP
Y POP
X POP
MOVE

# COLOR 10 : RIGHT
LIT
PUSH 1
PUSH 1 PUSH 2 PUSH 0
PUSH 0 PUSH 2 PUSH 0
PUSH 10 COLOR POP
Y POP
X POP
MOVE

# COLOR 11 : DOWN RIGHT
LIT
PUSH 1
PUSH 1 PUSH 4 PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 11 COLOR POP
Y POP
X POP
MOVE

# COLOR 12 : DOWN
LIT
PUSH 1
PUSH 1 PUSH 4 PUSH 0
PUSH 0 PUSH 6 PUSH 0
PUSH 12 COLOR POP
Y POP
X POP
MOVE

# COLOR 13 : DOWN LEFT
LIT
PUSH 1
PUSH 1 PUSH 2 PUSH 0
PUSH 0 PUSH 8 PUSH 0
PUSH 13 COLOR POP
Y POP
X POP
MOVE

# COLOR 14 : LEFT
LIT
PUSH 1
PUSH 1 PUSH 0 PUSH 0
PUSH 0 PUSH 8 PUSH 0
PUSH 14 COLOR POP
Y POP
X POP
MOVE

# COLOR 15 : UP LEFT
LIT
PUSH 1
PUSH 0 PUSH 14 PUSH 0
PUSH 0 PUSH 6 PUSH 0
PUSH 15 COLOR POP
Y POP
X POP
MOVE

RET


# ==============================================
# MOVING PC
# 0 1 2 3 7 A B F
# Sets color to green, moves PC to label past instruction to turn color red, draws line.

@PC_TEST
LIT PUSH 10 COLOR POP
GOTO >PC_TEST_B
LIT PUSH 9 COLOR POP
@PC_TEST_B
LIT
PUSH 0
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 10 PUSH 0
Y POP
X POP
MOVE
LIT
PUSH 1
PUSH 0 PUSH 6 PUSH 0
PUSH 0 PUSH 10 PUSH 0
Y POP
X POP
MOVE

RET


# ==============================================
# Reading / writing to memory
# 0 1 2 4 7 8 A B 
# Move to position, put a color into memory and copy it out again, move two pixels over and repeat

@MEM_TEST
LIT
PUSH 10
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 12 PUSH 0
Y POP
X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP

RET


# ==============================================
# Basic I/O
# 0 1 2 4 5 7 8 A B C
# Similar output as mem test, but asks for color first, and also writes that value to the output file

@IO_TEST
IO PUSH PEEK 0 POP
LIT
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 14 PUSH 0
Y POP
X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP
MEM POP PUSH X PUSH LIT PUSH 2 ADD POP X POP

RET

# ==============================================
# Subtraction and subtraction flag
# 0 1 2 4 5 7 8 A B C
# Similar to mem test, but starts at end of line of dots and works backwards. Uses cond.

@SUB_TEST
LIT
PUSH 10
PUSH 0 PUSH 4 PUSH 15
PUSH 1 PUSH 0 PUSH 0
Y POP
@SUB_TEST_B
X POP
MEM POP PUSH
X PUSH
LIT PUSH 2 SUB POP
SUB PUSH
LIT PUSH >SUB_TEST_B
COND
GOTO >SUB_TEST_C
@SUB_TEST_C

@END
