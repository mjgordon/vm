Currently : negation operator not being parsed correctly

Note : This file displays correctly in emacs org mode with org-indent-mode

* TODO
** Notation:
- B : Bug fix
- C : Change
- F : New Feature
- O : Optimization
- R : Refactor
- S : Security
- T : Test

- AS : Assembler
- CM : Compiler
- VM : Virtual machine
- PR : Project

** v001 Basic VM and assembler [13/13]
- Various untracked work 
- [X] +/- Become modes
- [X] Flag mode becomes RSTK mode.  
- [X] More efficient horizontal breshenham
- [X] Add vertical breshenham
- [X] Accept blank lines in assembly
- [X] Proper comments in assembly
- [X] Change way labels are handled, intern earlier
- [X] write emacs mode for .hxa
- [X] Finalize how calls and returns are handled when using RSTK, see above
- [X] Only create one dictionary per session. 
- [X] Finalize .hxa color-scheme - different color for rolled entries, cond should be same as goto?
- [X] Finalize test documentation
- [X] Finalize assembler documentation

*** TEST : test-opcodes.hxa [20/20]
- [X] 0 : 1 : COLOR
- [X] 1 : 3 : X
- [X] 2 : 3 : Y
- [X] 3 : 4 : PC
- [X] 4 : 1 : MEM
- [X] 5 : 1 : IO
- [X] 6 : 1 : RSTK
- [X] 7 : 1 : LIT
- [X] 8 : 2 -> 1 : +
- [X] 9 : 2 -> 1 : -

- [X] A : PUSH
- [X] B : POP
- [X] C : PEEK
- [X] D : COND
- [X] E : NOR
- [X] F : DRAW

EXPANSIONS
- [X] NOT
- [X] OR
- [X] AND
- [X] DUP
  
** v002 Additions to assembler and dictionary [35/35]
- [X] F AS : MULT expansion
- [X] F AS : MULT21 expansion
- [X] F AS : MULT22 expansion
- [X] F AS : DIV expansion
- [X] F AS : DIV21 expansion
- [X] F AS : DIV22 expansion
- [X] F AS : MOD expansion
- [X] F AS : MOD21 expansion
- [X] F AS : MOD22 expansion
- [X] F AS : ZERO2 expansion
- [X] F AS : DROP expansion
- [X] F AS : SWAP expansion
- [X] F AS : '+' Symbol for relative labels
- [X] C AS : Redefine CALL to use +
- [X] F AS : '%' Symbol for local labels
- [X] C AS : Make implementation of local labels smoother (definition requests # of gensyms)
- [X] C AS : Dictionary can now call different functions during expansion (e.g. +)
- [X] C VM : Replace EXECUTE with DROP
- [X] F VM : Add stack analysis in fast way
- [X] F VM : Reports execution time
- [X] F AS : Reports assembly time
- [X] F AS : Reports depth of expand token recursion
- [X] C AS : Clear sets and maps at start of assembly 
- [X] C AS : Assembler outputs file with same name as input
- [X] F VM : Read program file name as argument
- [X] F VM : Adaptive output mode
- [X] C VM : Make struct backend for output less stupid
- [X] R AS : Rename label and ref lists as sets in code
- [X] B VM : SDL window propery exits on close command
- [X] R PR : hxa/hxb files should live in their own top level project directory. Others should write/read from there
- [X] F AS : Token cleanup step: step through and remove redundant mode commands (e.g. the result of DROP DROP DROP)
- [X] T AS : Move math unit tests into their own file
- [X] B VM : Compiler warnings in vm.c
- [X] F PR : Update hxa emacs mode
- [X]   PR : Cleanup and document 

*** TEST : test-math.hxa [8/8]
- [X] MULT
- [X] MULT22
- [X] DIV
- [X] DIV21
- [X] DIV22
- [X] MOD 
- [X] MOD21
- [X] MOD22
  
** v003 Basic demos and assembly analysis [37/37]
- [X] F AS : ADDC3_1 expansion
- [X] F AS : ADDC4_1 expansion
- [X] F AS : EQUAL3 expansion
- [X] F AS : SUB33 expansion
- [X] F AS : CONST(3/4)_(0/1) expansions
- [X] F AS : DIV31 expansion
- [X] F AS : SUB31 expansion
- [X] F AS : MOD31 expansion
- [X] F AS : ADD31 expansion
- [X] F AS : BIN expansion
- [X] F AS : Report when trying to reference a non-existent label
- [X] F AS : Export mapping file of hxb bytes to hxa original. May get wacky when linking eventually 
- [X] F AS : Overall error flag (for bad opcode, bad ref etc) for reporting
- [X] C AS : Export analysis files with correct names
- [X] C AS : Add basic package and asdf system
- [X] R AS : Factor out all the add 1-digit functions
- [X] R AS : Separate dictionary definition literals from hashtable builder and return functions
- [X] R AS : Rename dictionary.lisp to assembler-dictionary.lisp
- [X] R AS : Rename util-assembly.lisp to assembler-util.lisp
- [X] S AS : use parse-integer instead of read-from-string
- [X] R VM : Rename all opPush etc. functions to execPush etc. 
- [X] F VM : Export heatmap file of bytecode program 
- [X] F VM : Dumb update cycle, call update pixels every $arg operations.
- [X] F VM : Export final image
- [X] C VM : Checks for SDL Events during run
- [X] C VM : Window redraws if dragged
- [X] F PR : Graphing of opcode usage (program vs runtime)
- [X] F PR : HTML Heatmap of original program 
- [X] F PR : Mouseover cycle count in HTML heatmap
- [X] F PR : Elementary cellular automata program (e.g. rule 90 Sierpinski)
- [X] F PR : Sierpinski carpet program
- [X] F PR : Input program filename to test script, VC script
- [X] C PR : Update README.md
- [X] C PR : Folder for program output
- [X] B AS : Properly handle trailing whitespace at end of lines
- [X] B VM : Fixed program run timing
- [X]   PR : Cleanup and document

*** test-math.hxa [7/7]
- [X] ADDC4_1
- [X] EQUAL3
- [X] SUB33
- [X] DIV31
- [X] SUB31
- [X] MOD31
- [X] BIN

** v004 Instruction Set Reconfiguring [7/7]
- [X] C PR : Replace COLOR mode and MOVE command with RSH and LSH
- [X] C PR : Replace PEEK w/ argument with PEEK : copy second item on stack to top of stack
- [X] C AS : Rewrite DUP and SWAP to use new version of PEEK
- [X] C AS : Add new PEEK2 and PEEK3 macros
- [X] B AS : Fix shadowing issues in opcode package
- [X] F PR : Setup test system using prove
- [X] C PR : Rewrite test files

** v005 Compiling and Linking [13/18]
- [X] F AS : PUSH2 PUSH3 PUSH4 for pushing larger numbers
- [X] R AS : Cleanup usage of car/first, cdr/rest etc
- [X] C AS : Remove + special character
- [X] C AS : Make tokens a struct
- [X] R AS : Redo mapping to use struct tokens
- [X] R AS : (dictionary-expand) should take full token list and return remaining token list
- [ ] B CM : Parser - Correctly handle two repeating tokens in a row in a rule
- [ ] F CM : Write outline for hxc language
- [X] F CM : Basic lexer
- [X] F CM : Basic parser
- [X] F CM : Basic generation
- [X] F CM : Parser rule options
- [X] F CM : Parser rule repeats
- [X] F CM : Automatic compiler testing against valid and invalid single-file programs
- [ ] F CM : Compiler error collection and reporting
- [ ] F CM : Negation 
- [X] F PR : Automatically scan the assembler dictionary and call the elisp regex builder for hxa-mode

*** TEST: test-macros.lisp [0/3]
- [ ] PUSH2
- [ ] PUSH3
- [ ] PUSH4

** vFUTURE
- [ ] F PR : Testing should scan dictionary for macro coverage
- [ ] T VM : Speed of main opcode branching being switch statement vs function pointer array. (Checked assembly, *may* be doing an internal jump table right now, can't tell. Saving for when I have a more intensive demo program to test with, so differences won't be rounding errors in scale. NVM I've got one now, sierpinski takes 5 minutes to run my god
- [ ] C PR : Opcode graphing should separate constant numbers in assembly
- [ ] C VM : Use separate flags for ADD, SUB, RSH, LSH
- [ ] C AS : Rename opcodes to reflect bit-lengths rather than nb-lengths


** Reminders
- C : We don't want to store tokens as (simpler conses) because there's other information such as tree inclusion, line numbers, that is helpful to pull along from the start
  
* Documentation
** Links:
https://www.vttoth.com/CMS/projects/13-4-bit-processor/134-viktors-amazing-4-bit-processor-architecture
https://github.com/qeedquan/turtle/blob/master/src/util.c

** Editor
*** .hxa
elisp snippet for generating the hxa-mode emacs rule for expansions:
(regexp-opt '("DROP" "DROP1" "DUP" "SWAP" "CONST3_0" "CONST4_0" "CONST3_1" "CONST4_1" "AND" "OR" "NOT" "TRUE" "BIN" "ZERO2" "EQUAL3" "ADD21" "ADD22" "ADD31" "ADDC3_1" "ADDC4_1" "SUB21" "SUB22" "SUB31" "SUB33" "MULT" "MULT21" "MULT22" "DIV" "DIV21" "DIV22" "DIV31" "MOD" "MOD21" "MOD22" "MOD31" "OUT" "OUT8" "OUT12" "OUT16" "PEEK2" "PEEK3"))

** General
Screen Storage:
80x25char @ 8x12 px = 640 x 300 px
2000 char @ 2nb = 4000 nb or roughly 4 pages

2nb = 256 values. Need 7 bits for 128 standard ascii.
Can either have full 256 ascii or use last bit as color.

Font Storage:
8x12 Mem rect Per Character. 8*128 = 1024 cells wide naively, 12,288 total or 3 pages
Or, 128 characters in 4 32-character blocks. Each bit per cell describes whether that pixel is on or off in each block. So: 8*32 = 256 cells wide, 3072 total (fits in one page).
Decoding might be slow though?

Variables:
Pointer = 8nb (1 : nb length, 1 : some other flag? , 3 : page, 3 : location)
512 Pointers per page.


** Symbols
@   : Label, assembler stores its position in a hashmap.
>   : Label reference, assembler replaces with final address of associated @ or % label
%   : Local label, the assembler will turn every expanded instance into a unique label 

** Opcodes
B : âˆ† : MNMNC  : DESCRIPTION

0 : 1 : COLOR  : Color of line drawn with DRAW
1 : 3 : X      : Position in 'page' of memory dealt with. Destination x for draw.
2 : 3 : Y      : 'Page' of memory dealt with. Destination y for draw
3 : 4 : PC     : PUSH to view use current PC. POP to set PC (e.g. goto)
4 : 1 : MEM    : Load / Set a position in memory determined by X and Y
5 : 1 : IO     : PUSH to read a NB, POP to write a NB
6 : 1 : RSTK   : A second stack. Used by various expansions for a return stack
7 : 1 : LIT    : Push to put the next NB on the stack. Pop to ?(execute top NB / drop top NB)
8 : 2->1 : ADD : POP to add top two NB. PUSH to use carry flag of last operation
9 : 2->1 : SUB : POP to sub top two NB. PUSH to use underflow flag of last operation

A : N : PUSH   : Push selected mode location onto the stack
B : N : POP    : Pop the stack into the selected mode location
C : 1 : PEEK   : Copy the second item of the stack to the top of the stack
D : 5 : COND   : Go to the address at the top 4 positions of the stack if the 5th stack position is 0
E : 2->1 : NOR : Performs a logical NOR on the top two stack positions
F : 1 : DRAW   : Draws a line of COLOR between the last position and X/Y if the top position is 1. Else just move.

Ideas:
- Explicit Drop (LIT POP)
- Explicit Swap (PEEK 1 RSTK POP POP DROP RSTK PUSH PUSH)
- Explicit Dup (PEEK 0)
- Jump if carry (ADD PUSH ADDR PUSH COND)
- Twos Complement? (NOT LIT PUSH 1 ADD POP)

- Rotate L
- Rotate R



** Expansion mnemonics

- MNEMONIC       : STACK âˆ†   : DESCRIPTION

*** STACK OPERATION
DROP           : (-1) (0)  : Removes the top item of the stack
DROP1          : (-1) (0)  : Removes the second item of the stack
DUP            : (+1) (0)  : Copies the top item of the stack
SWAP           : (0)  (0)  : Swaps the top two items on the stack
CONST3_0       : (+3) (0)  : Pushes a 12-bit 0 to the stack
CONST4_0       : (+4) (0)  : Pushes a 16-bit 0 to the stack
CONST3_1       : (+3) (0)  : Pushes a 12-bit 1 to the stack
CONST4_1       : (+4) (0)  : Pushes a 16-bit 1 to the stack
PEEK2          : (+1) (0)  : Copies the third item of the stack to the top of the stack
PEEK3          : (+1) (0)  : Copies the fourth item of the stack to the top of the stack

*** LOGIC & COMPARISON
AND            : (-1) (0)  : Performs a bitwise AND on the top two nb
OR             : (-1) (0)  : Performs a bitwise OR on the top two nb
NOT            : (-1) (0)  : Performs a bitwise NOT on the top two nb
TRUE           : (0)  (0)  : Converts the top of the stack to F (logical T) if not 0 (logical F)
BIN            : (0)  (0)  : Converts the top of the stack to 1 if not 0
ZERO2          : (-1) (0)  : Returns a one-digit zero if the two-digit number is zero

*** MATH : COMPARISON
EQUAL3         : (-5) (0)  : Compares the top two 3-digit numbers. Returns T if equal, F otherwise

*** MATH : ADDITION
ADDU11         : (-1) (+1) : Utility function, adds two numbers, puts on rstk, puts carry on data stack
ADD21          : (-1) (0)  : Adds a 1-digit number to a 2-digit number
ADD22          : (-2) (0)  : Adds a 2-digit number to a 2-digit number
ADD31          : (-1) (0)  : Adds a 1-digit number to a 3-digit number
ADDC3_1        : (0)  (0)  : Adds the constant 1 to a 3 digit number on the stack
ADDC4_1        : (0)  (0)  : Adds the constant 1 to a 4 digit number on the stack

*** MATH : SUBTRACTION
SUB21          : (-1) (0)  : Subtracts a 1-digit number from a 2-digit number
SUB22          : (-2) (0)  : Subtracts a 2-digit number from a 2-digit number
SUB31          : (-1) (0)  : Subtracts a 1-digit number from a 3-digit number
SUB33          : (-3) (0)  : Subtracts a 3-digit number froma 3-digit number

*** MATH : MULTIPLICATION
MULT           : (0)  (0)  : Multiplies two one-digit numbers
MULT21         : (0)  (0)  : Multiplies a two-digit number by a one-digit numer
MULT22         : (0)  (0)  : Multiplies a two-digit number by a two-digit number

*** MATH : DIVISION
DIV            : (-1) (0)  : Divides a 1-digit number by a 1-digit number. Sets FLAG if /0
DIV21          : (-1) (0)  : Divides a 2-digit number by a 1-digit number. Sets FLAG if /0
DIV22          : (-2) (0)  : Divides a 2-digit number by a 2-digit number. Sets FLAG if /0
DIV31          : (-1) (0)  : Divides a 3-digit number by a 1-digit number. Sets FLAG if /0

*** MATH : MODULO
MOD            : (-1) (0)  : Takes the modulo of a 1-digit number and a 1-digit number
MOD21          : (-1) (0)  : Takes the modulo of a 2-digit number and a 1-digit number
MOD22          : (-2) (0)  : Takes the modulo of a 2-digit number and a 2-digit number
MOD31          : (-1) (0)  : Takes the modulo of a 3-digit number and a 2-digit number

*** PROGRAM FLOW
GOTO >ADDR     : (0)  (0)  : Moves PC directly to >ADDR
CALL >ADDR     : (0)  (+4) : Puts a return position on the RSTK, moves PC to >ADDR
RET            : (0)  (-4) : Moves PC back to top position on the RSTK

*** IO
OUT            : (-1) (0)  : Outputs 1 nb from the stack
OUTINT8        : (-2) (0)  : Outputs 2 nb from the stack, formatted as an int
OUTINT12       : (-3) (0)  : Outputs 3 nb from the stack, formatted as an int
OUTINT16       : (-4) (0)  : Outputs 4 nb from the stack, formatted as an int

** Expansion Definitions

  _EXPANSION_NAME                 (DATA STACK ON ENTRY) (RETURN STACK ON ENTRY)
  ...
  OPERATIONS                      (DATA STACK STATE) (RETURN STACK STATE)
  ...
  _RESULTS                        (âˆ† DATA STACK) (âˆ† RETURN STACK)


*** STACK OPERATION
_DROP                           (A) ()
LIT POP                         () ()
_RESULT                         (-1) (0)

_DROP1                          (A B) ()
RSTK POP                        (A) (B)
DROP                            () (B)
RSTK PUSH                       (B) ()
_RESULT                         (-1) (0)

_DUP                            (A) ()
LIT PUSH 0                      (A 0) ()
PEEK                            (A 0 A) ()
RSTK POP                        (A 0) (A)
DROP                            (A) (A)
RSTK PUSH                       (A A)
_RESULT                         (+ 1) ()

_SWAP                           (A B) ()
PEEK                            (A B A) ()
RSTK POP POP                    (A) (A B)
DROP                            () (A B)
RSTK PUSH PUSH                  (B A) ()
_RESULT                         (0) (0)

_CONST3_0                       () ()
LIT PUSH 0 PUSH 0 PUSH 0        (0 0 0) ()
_RESULT                         (+3) ()

_CONST4_0                       () ()
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 (0 0 0 0) ()
_RESULT                         (+4) ()

_CONST3_1                       () ()
LIT PUSH 0 PUSH 0 PUSH 1        (0 0 1) ()
_RESULT                         (+3) ()

_CONST4_1                       () ()
LIT PUSH 0 PUSH 0 PUSH 0 PUSH1  (0 0 0 1) ()
_RESULT                         (+4) ()

_PEEK2                          (A B C) ()
RSTK POP PEEK                   (A B A) (C)
RSTK PUSH                       (A B A C) ()
SWAP                            (A B C A) ()
_RESULT                         (+1) ()

_PEEK3                          (A B C D) ()
RSTK POP POP                    (A B) (D C)
PEEK                            (A B A) (D C)
RSTK PUSH SWAP                  (A B C A) (D)
RSTK PUSH SWAP                  (A B C D A) ()
_RESULT                         (+1) ()

_PUSH2                          ()
PUSH 


*** LOGIC AND COMPARISON

_TRUE                           (A) ()
LIT PUSH >0 COND                () ()
LIT PUSH 15                     (15) ()
GOTO >1                         () ()
%0
LIT PUSH 0                      (0) ()
%1
_RESULT                         (0) (0)                   

_BIN                            (A) ()
LIT PUSH >0 COND                () ()
LIT PUSH 1                      (1) ()
GOTO >1                         () ()
%0
LIT PUSH 0                      (0) ()
%1
_RESULT                         (0) (0)

_ZERO2                          (A B) ()
ADD POP                         (A+B) ()
ADD PUSH POP                    (A+B+F) ()
_RESULT                         (-1) (0)

*** MATH : COMPARISON

_EQUAL3                         (A B C D E F) ()

PEEK3 SUB POP                  (A B C D E F-C) ()
TRUE NOT                        (A B C D E !F-C) ()
LIT PUSH >0 COND                (A B C D E) ()
PEEK3 SUB POP                  (A B C D E-B) ()
TRUE NOT                        (A B C D !E-B) ()
LIT PUSH >1 COND                (A B C D) ()
PEEK3 SUB POP                  (A B C D-A) ()
TRUE NOT                        (A B C !D-A) ()
LIT PUSH >2 COND                (A B C) ()
DROP DROP DROP                  () ()
LIT PUSH 15 GOTO >3             (15) ()
%0
DROP                            (A B C D) ()
%1
DROP                            (A B C) ()
%2
DROP DROP DROP                  () ()
LIT PUSH 0                      (0) ()
%3

*** MATH : ADDITION

_ADDU_11                        (A B) ()
ADD POP RSTK POP ADD PUSH       (F) (A+B)
_RESULT                         (-1) (+1)

_ADD21                          (A B C) ()
ADD POP RSTK POP ADD PUSH       (A F) (B+C)
ADD POP RSTK PUSH               (A+F B+C) ()
_RESULT                         (-1) (0)

_ADD22                          (A B C D) ()
SWAP RSTK POP                   (A B D) (C)
ADD21                           (A+F B+D) (C)
RSTK PUSH SWAP RSTK POP         (A+F C) (B+D)
ADD POP RSTK PUSH               (A+F+C B+D) ()
_RESULT                         (-2) (0)

_ADD31                          (A B C D) ()
ADD POP RSTK POP ADD PUSH       (A B F) (C+D)
ADD POP RSTK POP ADD PUSH       (A F1) (C+D B+F)
ADD POP RSTK PUSH PUSH          (A+F1 B+F C+D) ()
_RESULT                         (-1) (0)

_ADDC3_1                        (A B C) ()
LIT PUSH 1                      (A B C 1) ()
ADD POP RSTK POP ADD PUSH       (A B F) (C+1)
ADD POP RSTK POP ADD PUSH       (A F1) (C+1 B+F)
ADD POP RSTK PUSH PUSH          (A+F1 B+F C+1) ()
_RESULT                         (0) (0)

_ADDC4_1                        (A B C D) ()
LIT PUSH 1                      (A B C D 1) ()
ADD POP RSTK POP ADD PUSH       (A B C F) (D+1)
ADD POP RSTK POP ADD PUSH       (A B F2) (D+1) (C+F)
ADD POP RSTK POP ADD PUSH       (A F3) (D+1 C+F B+F2)
ADD POP RSTK PUSH PUSH PUSH     (A+F3 B+F2 C+F D+1) ()
_RESULT                         (0) (0)

*** MATH : SUBTRACTION

# C is subtracted from AB
_SUB21                          (A B C) ()
SUB POP                         (A B-C) ()
RSTK POP SUB PUSH               (A F) (B-C)
SUB POP RSTK PUSH               (A-F B-C) ()
_RESULT                         (-1) (0)

# CD is subtracted from AB
_SUB22                          (A B C D) ()
SWAP RSTK POP                   (A B D) (C)
SUB21                           (A-F B-D) (C)
RSTK PUSH SWAP                  (A-F C B-D) ()
SUB PUSH RSTK POP POP           (A-F C) (F B-D)
SUB POP RSTK PUSH               (A-C B-D) (F)
LIT PUSH 0                      (A-C B-D 0) (F)
SUB PUSH RSTK PUSH ADD POP      (A-C B-D 0 F1+F2) ()
SUB POP DROP                    (A-C B-D) ()
_RESULT                         (-2) (0)

# D is subtracted from ABC
_SUB31                          (A B C D) ()
SUB POP                         (A B C-D) ()
RSTK POP SUB PUSH               (A B F) (C-D)
SUB POP                         (A B-F) (C-D)
RSTK POP SUB PUSH               (A F2) (C-D B-F)
SUB POP                         (A-F2) (C-D B-F)
RSTK PUSH PUSH                  (A-F2 B-F C-D)
_RESULT                         (-1) (0)

_RESULT

_SUB33                          (A B C D E G) ()
PEEK2 RSTK POP POP POP DROP    (A B C) (D G E)
RSTK PUSH PUSH                  (A B C E G) (D)
SUB22                           (A B-E C-G) (D)
RSTK PUSH PEEK2 PEEK2         (A B-E C-G D B-E C-G) ()
RSTK POP POP POP DROP DROP      (A) (C-G B-E D)
SUB PUSH POP                    (A-F) (C-G B-E D)
RSTK PUSH                       (A-F D) (C-G B-E)
SUB POP RSTK PUSH PUSH          (A-F-D B-E C-G) ()
_RESULT                         (-3) (0)


*** MATH : MULTIPLICATION
# A and B are the factors. P and R are the digits of the product
# AxB = PR
_MULT                           (A B) ()
RSTK POP POP LIT PUSH 0 PUSH 0  (0 0) (B A)
%0                              (P R) (B A)
RSTK PUSH DUP                   (P R A A) (B)
RSTK PUSH DUP                   (P R A A B B) ()
LIT PUSH >1                     (P R A A B B >1) ()
COND(>1)                        (P R A A B) ()
LIT PUSH 1                      (P R A A B 1) ()
SUB POP                         (P R A A B-1) ()
RSTK POP POP                    (P R A) (B-1 A)
ADD POP                         (P R+A) (B-1 A)
RSTK POP ADD PUSH               (P F) (B-1 A R+A)
POP RSTK PUSH                   (P+F R+A) (B-1 A)
GOTO >0
%1                              (P R A A 0) ()
DROP DROP DROP                  (P R) ()
_RESULT                         (0) (0)

# Multiplies 0xAB and 0xCD
# Result should be 0xMNOP
# K is carry placeholders here
     AB
x    CD
=======
   MNOP
   0123

_MULT22                         (A B C D) ()
RSTK POP PEEK2 PEEK2          (A B C A B) (D)
RSTK POP POP                    (A B C) (D B A)
MULT21                          (M N O) (D B A)
RSTK PUSH PUSH PUSH             (M N O A B D) ()
MULT21                          (M Na Oa Nb Ob P) ()
RSTK POP POP                    (M Na Oa Nb) (P Ob)
SWAP RSTK POP                   (M Na Nb) (P Ob Oa)
ADD21                            (M+F N) (P Ob Oa)
RSTK PUSH PUSH                  (M+F N Oa Ob) (P)
ADD21                            (M+F N+F O) (P)
RSTK PUSH                       (M+F N+F O P) ()
_RESULT                         (0) (0)


_MULT21                         (A B C) ()
RSTK POP SWAP RSTK PUSH         (B A C) ()
DUP RSTK POP                    (B A C) (C)
MULT                            (B K T) (C)
PEEK2 RSTK POP POP POP         (B) (C B T K)
DROP RSTK PUSH PUSH PUSH PUSH   (K T B C) ()
MULT                            (K T K T) ()
RSTK POP ADD POP                (M N) (O)
RSTK POP ADD PUSH               (M F) (O N)
ADD POP RSTK PUSH PUSH          (M+F N O) ()
_RESULT                         (0) (0)

*** MATH : DIVISION

# A is dividend, B is divisor, Q is quotient, F is underflow flag
# SUB underflow flag is set to 1 if attempting to divide by zero, created by subbing M and N at the end
# Uses one more GOTO than MULT, but only for the rarer divide by zero cases
_DIV                            (A B) ()
DUP LIT PUSH >1 COND            (A B) ()
DUP RSTK POP POP POP LIT PUSH 0 (0) (B B A)
RSTK PUSH PUSH                  (0 A B) (B)
%0                              (Q A B) (B)
SUB POP                         (Q A-B) (B)
RSTK POP SUB PUSH               (Q F) (B A-B)
TRUE NOT                        (Q !F) (B A-B)
LIT PUSH >2                     (Q !F >2) (B A-B)
COND (>2)                       (Q) (B A-B)
LIT PUSH 1 ADD POP              (Q) (B A-B)
RSTK PUSH PUSH                  (Q A-B B) ()
DUP RSTK POP                    (Q A-B B) (B)
GOTO >0 
%1                              (A B) ()
DROP DROP                       () ()
LIT PUSH 0 PUSH 0 PUSH 1        (0 0 1) ()
GOTO >3
%2                              (Q) (B A-B)
RSTK PUSH PUSH                  (Q A-B B) () ()
DROP DROP                       (Q) ()
LIT PUSH 1 PUSH 0               (Q 1 0) ()
%3                              (Q M N) ()
SUB POP DROP                    (Q) ()
_RESULT                         (-1) ()

# AB is dividend. C is divisor. Q is quotient, F is underflow flag
_DIV21                          (A B C) ()
DUP LIT PUSH >1 COND            (A B C) ()
DUP RSTK POP POP POP POP        () (C C B A)
LIT PUSH 0 PUSH 0               (0 0) (C C B A)
RSTK PUSH PUSH PUSH             (0 0 A B C) (C)
%0
SUB21                           (Q R A-F B-C) (C)
RSTK POP POP SUB PUSH           (Q R F) (C B-C A-F)
TRUE NOT                        (Q R !F) (C B-C A-F)
LIT PUSH >2                     (Q R !F >2) (C B-C A-F)
COND (>2)                       (Q R) (C B-C A-F)
LIT PUSH 1 ADD21                (Q R) (C B-C A-F)
RSTK PUSH PUSH PUSH             (Q R A-F B-C C) ()
DUP RSTK POP                    (Q R A-F B-C C) (C) 
GOTO >0
%1                              (A B C) ()
DROP DROP DROP                  () ()
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 (0 0 0 1) ()
GOTO >3
%2 
RSTK PUSH PUSH PUSH             (Q R A-F B-C C) ()
DROP DROP DROP                  (Q R) ()
LIT PUSH 1 PUSH 0               (Q R 1 0) ()
%3
SUB POP DROP                    (Q R) ()
_RESULT                         (-1) ()

# AB is dividend. CD is divisor. QR is quotient, F is underflow flag
_DIV22                          (A B C D) ()
PEEK PEEK ADD POP           (A B C D C+D) ()
ADD PUSH POP                    (A B C D C+D+F) ()
LIT PUSH >1 COND                (A B C D) ()
PEEK PEEK RSTK POP POP      (A B C D) (D C)
POP POP POP POP                 () (D C D C B A)
LIT PUSH 0 PUSH 0               (0 0) (D C D C B A)
RSTK PUSH PUSH PUSH PUSH        (0 0 A B C D) (D C)
%0
SUB22                           (Q R A-C B-D) (D C)
RSTK POP POP SUB PUSH           (Q R F) (D C B-D A-C)
TRUE NOT                        (Q R !F) (D C B-D A-C)
LIT PUSH >2                     (Q R !F >2) (D C B-D A-C)
COND(>2)                        (Q R) (D C B-D A-C)
LIT PUSH 1 ADD21                (Q R) (D C B-D A-C)
RSTK PUSH PUSH PUSH PUSH        (Q R A-C B-D C D) ()
PEEK PEEK RSTK POP POP      (Q R A-C B-D C D) (D C)
GOTO >0
%1                              (A B C D) ()
DROP DROP DROP DROP             () ()
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 (0 0 0 1) ()
GOTO >3
%2
RSTK PUSH PUSH PUSH PUSH        (Q R A-C B-D C D) ()
DROP DROP DROP DROP             (Q R) ()
LIT PUSH 1 PUSH 0               (Q R 1 0) ()
%3
SUB POP DROP                    (Q R) ()
_RESULT                         (-2) ()

# ABC is dividend, D is divisor, QRS is quotient, F is underflow flag
_DIV31                          (A B C D) ()
DUP LIT PUSH >1 COND            (A B C D) ()
DUP RSTK POP POP POP POP POP    () (D D C B A)
CONST3_0                        (0 0 0) (D D C B A)
RSTK PUSH PUSH PUSH PUSH        (0 0 0 A B C D) (D)
%0
SUB31                           (Q U R A-F2 B-F C-D) (D)
RSTK POP POP POP SUB PUSH       (Q U R F) (D C-D B-F A-F2)
TRUE NOT                        (Q U R !F) (D C-D B-F A-F2)
LIT PUSH >2 COND                (Q U R) (D C-D B-F A-F2)
ADDC3_1                         (Q U R) (D C-D B-F A-F2)
RSTK PUSH PUSH PUSH PUSH        (Q U R A-F2 B-F C-D D) ()
DUP RSTK POP                    (Q U R A-F2 B-F C-D D) (D)
GOTO >0
%1                              (A B C D) ()
DROP DROP DROP DROP             () ()
LIT PUSH 0 CONST4_1             (0 0 0 0 1) ()
GOTO >3
%2
RSTK PUSH PUSH PUSH PUSH        (Q U R A-F2 B-F C-D D) ()
DROP DROP DROP DROP             (Q U R) ()
LIT PUSH 1 PUSH 0               (Q U R 1 0) ()
%3
SUB POP DROP                    (Q U R) ()
_RESULT                         (-1) ()

_RESULT                         (-1) ()

*** MATH : MODULO

_MOD                            (A B) ()
DUP LIT PUSH >1 COND            (A B) ()
DUP RSTK POP                    (A B) (B)
%0
SUB POP                         (A-B) (B)
SUB PUSH TRUE NOT               (A-B !F) (B)
LIT PUSH >2 COND                (A-B) (B)
RSTK PUSH DUP RSTK POP          (A-B B) (B)
GOTO >0
%1
RSTK POP                        (A) (B)
%2
RSTK PUSH ADD POP               (-R+B) ()
_RESULT                         (-1) (0)

# Takes the modulo of a two digit number and a one digit number
_MOD21                          (A B C) ()
DUP LIT PUSH >1 COND            (A B C) ()
DUP RSTK POP                    (A B C) (C)
%0
SUB21                           (A-F B-C) (C)
SUB PUSH TRUE NOT               (A-F B-C !F) (C)
LIT PUSH >2 COND                (A-F B-C) (C)
RSTK PUSH DUP RSTK POP          (A-F B-C C) (C)
GOTO >0
%1
RSTK POP                        (A B) (C)
%2
RSTK PUSH ADD21                 (A+C B+C) ()
_RESULT                         (-1) ()

# Returns the modulo of a two-digit number and a two-digit number
_MOD22                          (A B C D) ()
PEEK PEEK ZERO2                 (A B C D Z) ()
LIT PUSH >1 COND                (A B C D) ()
PEEK PEEK RSTK POP POP          (A B C D) (D C)
%0
SUB22                           (A-C B-D) (D C)
SUB PUSH TRUE NOT               (A-C B-D !F) (D C)
LIT PUSH >2 COND                (A-C B-D) (D C)
RSTK PUSH PUSH PEEK PEEK        (A-C B-D C D C D) ()
RSTK POP POP                    (A-C B-D C D) (D C)
GOTO >0
%1
RSTK POP POP                    (A B) (D C)
%2
RSTK PUSH PUSH ADD22            (A+C B+D) ()
_RESULT                         (-2) ()

# Returns the modulo of a ABC by D
_MOD31                          (A B C D) ()
DUP LIT PUSH >1 COND            (A B C D) ()
DUP RSTK POP                    (A B C D) (D)
%0
SUB31                           (A-F2 B-F C-D) (D)
SUB PUSH TRUE NOT               (A-F2 B-F C-D !F) (D)
LIT PUSH >2 COND                (A-F2 B-F C-D) (D)
RSTK PUSH DUP RSTK POP          (A-F2 B-F C-D D) (D)
GOTO >0
%1
RSTK POP                        (A B C) (D)
%2 
RSTK PUSH ADD31                 (A+D B+D C+D) ()
_RESULT                         (-1) ()

*** PROGRAM FLOW

# Reminder: PUSH >ADDR is automatically converted to the correct address
_GOTO >ADDR                     () ()
LIT PUSH >ADDR                  (A B C D) ()
PC POP                          () ()
_RESULT                         (0) (0)


# Pushes the current PC to RSTK, plus a constant equal to the size of the expansion itself
# Where 00XY is the call size
_CALL >ADDR                     () ()
LIT PUSH +23                    (A B C+1 D+13) ()
RSTK PUSH PUSH PUSH PUSH        () (D+Y C+X B A)
GOTO >ADDR                      () (D+Y C+X+F B A)
_RESULT                         (0) (+4)


# Where ABCD is the adjusted call point
_RETURN                         () (D C B A)
RSTK PUSH PUSH PUSH PUSH        (A B C D) ()
PC POP                          () ()
_RESULT                         (0) (-4)
*** IO


** HXC
Minimal subset of C
*** Datatypes
- int4 (nb)
- int8
- int12
- int16
- boolean

*** Sample function definition
int4 main() {
    int a = 4;
}


