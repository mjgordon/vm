# ==============================================
# RSTK (and addition flag)
# Calls all other tests sequentially with the CALL expansion; 
# each test ends with a RET expansion, then GOTO's the end of the file

CALL >PC_TEST
CALL >ADD_TEST
CALL >SUB_TEST
#CALL >PEEK_TEST
#CALL >NOR_TEST

GOTO >END


# ==============================================
# PC Mode
# Puts 1, moves PC beyond instructions that would change it to 2
# Output : 1

@PC_TEST
LIT PUSH 1
GOTO >PC_TEST_B
LIT PUSH 1 ADD POP
@PC_TEST_B
OUT
RET


# ==============================================
# ADD mode and addition flag
# Adds two non-overflowing and two overflowing NBs. Returns their results and their overflow flags
# Output : 5 0 0 1

@ADD_TEST
LIT PUSH 2  PUSH 3 ADD POP OUT ADD PUSH OUT
LIT PUSH 15 PUSH 1 ADD POP OUT ADD PUSH OUT
RET

# ==============================================
# SUB mode and subtraction flag
# Subracts several non-underflowing and underflowing pairs of NBs.
# Output : 2 0 0 0 15 1 15 1 1 1

@SUB_TEST
LIT PUSH 5 PUSH  3 SUB POP OUT SUB PUSH OUT
LIT PUSH 5 PUSH  5 SUB POP OUT SUB PUSH OUT
LIT PUSH 5 PUSH  6 SUB POP OUT SUB PUSH OUT
LIT PUSH 0 PUSH  1 SUB POP OUT SUB PUSH OUT
LIT PUSH 0 PUSH 15 SUB POP OUT SUB PUSH OUT

RET


# ==============================================
# PEEK Command
# Pushes a sequence of colors, then uses PEEK to add that backwards onto the stack

@PEEK_TEST
LIT
PUSH 8 PUSH 9 PUSH 10 PUSH 11 PUSH 12 PUSH 13 PUSH 14 PUSH 15
PEEK 0 PEEK 2 PEEK 4 PEEK 6 PEEK 8 PEEK 10 PEEK 12 PEEK 14
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 10 PUSH 12
Y POP
X POP
@PEEK_TEST_B
MEM POP
X PUSH
LIT PUSH 1 ADD POP
X POP
ADD PUSH
LIT PUSH >PEEK_TEST_B
COND

RET


# ==============================================
# NOR command and logic folds
# Lays down the expected results on one line, puts test case results for
# nor, not, or, and on the next line

@NOR_TEST
LIT
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 11 PUSH 0
Y POP
X POP

LIT
PUSH 9
PUSH 15 PUSH 0 PUSH 0 PUSH 0
PUSH 9
PUSH 15 PUSH 15 PUSH 15 PUSH 0
PUSH 9
PUSH 0 PUSH 15
PUSH 9
PUSH 0 PUSH 0 PUSH 0 PUSH 15
PUSH 9
MEM POP LIT PUSH 0 PUSH 4 PUSH 1 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 2 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 3 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 4 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 5 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 6 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 7 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 8 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 9 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 10 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 11 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 12 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 13 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 14 X POP
MEM POP LIT PUSH 0 PUSH 4 PUSH 15 X POP
MEM POP LIT PUSH 0 PUSH 5 PUSH 0 X POP
MEM POP LIT PUSH 0 PUSH 5 PUSH 1 X POP
MEM POP LIT PUSH 0 PUSH 5 PUSH 2 X POP
MEM POP LIT PUSH 0 PUSH 5 PUSH 3 X POP

LIT
PUSH 0 PUSH 4 PUSH 0
PUSH 0 PUSH 11 PUSH 1
Y POP
X POP

LIT PUSH 9
MEM POP LIT PUSH 0 PUSH 4 PUSH 1 X POP
LIT PUSH 0 PUSH 0 NOR
MEM POP LIT PUSH 0 PUSH 4 PUSH 2 X POP
LIT PUSH 0 PUSH 15 NOR
MEM POP LIT PUSH 0 PUSH 4 PUSH 3 X POP
LIT PUSH 15 PUSH 0 NOR
MEM POP LIT PUSH 0 PUSH 4 PUSH 4 X POP
LIT PUSH 15 PUSH 15 NOR
MEM POP LIT PUSH 0 PUSH 4 PUSH 5 X POP
LIT PUSH 9
MEM POP LIT PUSH 0 PUSH 4 PUSH 6 X POP
LIT PUSH 0 NOT
MEM POP LIT PUSH 0 PUSH 4 PUSH 7 X POP
LIT PUSH 15 NOT
MEM POP LIT PUSH 0 PUSH 4 PUSH 8 X POP
LIT PUSH 9
MEM POP LIT PUSH 0 PUSH 4 PUSH 9 X POP
LIT PUSH 0 PUSH 0 OR
MEM POP LIT PUSH 0 PUSH 4 PUSH 10 X POP
LIT PUSH 0 PUSH 15 OR
MEM POP LIT PUSH 0 PUSH 4 PUSH 11 X POP
LIT PUSH 15 PUSH 0 OR
MEM POP LIT PUSH 0 PUSH 4 PUSH 12 X POP
LIT PUSH 15 PUSH 15 OR
MEM POP LIT PUSH 0 PUSH 4 PUSH 13 X POP
LIT PUSH 9
MEM POP LIT PUSH 0 PUSH 4 PUSH 14 X POP
LIT PUSH 0 PUSH 0 AND
MEM POP LIT PUSH 0 PUSH 4 PUSH 15 X POP
LIT PUSH 0 PUSH 15 AND
MEM POP LIT PUSH 0 PUSH 5 PUSH 0 X POP
LIT PUSH 15 PUSH 0 AND
MEM POP LIT PUSH 0 PUSH 5 PUSH 1 X POP
LIT PUSH 15 PUSH 15 AND
MEM POP LIT PUSH 0 PUSH 5 PUSH 2 X POP
LIT PUSH 9
MEM POP LIT PUSH 0 PUSH 5 PUSH 3 X POP

RET

@END
