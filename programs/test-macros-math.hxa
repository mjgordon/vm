# ==============================================
# Tests for math expansion mnenomics

@START
CALL >EQUAL_12_TEST
CALL >ADDC_16_1_TEST
CALL >SUB_8_4_TEST
CALL >SUB_8_8_TEST
CALL >SUB_12_4_TEST
CALL >SUB_12_12_TEST
CALL >MULT_4_4_TEST
CALL >MULT_8_8_TEST
CALL >DIV_4_4_TEST
CALL >DIV_8_4_TEST
CALL >DIV_8_8_TEST
CALL >DIV_12_4_TEST
CALL >MOD_TEST
CALL >MOD_8_4_TEST
CALL >MOD_8_8_TEST
CALL >MOD_12_4_TEST
CALL >NEG_TEST

GOTO >END


# ==============================================
# EQUAL_12 : Compares two 3-digit numbers for equality. Returns F if true
# Output should be 15, 15, 15, 0, 0, 15

@EQUAL_12_TEST
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 PUSH 0 PUSH 0 EQUAL_12 OUT
LIT PUSH 1 PUSH 1 PUSH 1 PUSH 1 PUSH 1 PUSH 1 EQUAL_12 OUT
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 15 PUSH 15 PUSH 15 EQUAL_12 OUT
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 15 PUSH 15 PUSH 15 EQUAL_12 OUT
LIT PUSH 2 PUSH 14 PUSH 7 PUSH 2 PUSH 8 PUSH 15 EQUAL_12 OUT
LIT PUSH 2 PUSH 1 PUSH 9 PUSH 2 PUSH 1 PUSH 9 EQUAL_12 OUT

RET


# ==============================================
# ADDC_16_1 : Adds constant 1 to a 4 digit number on the stack
# Output should be 1, 2, 4097, 0

@ADDC_16_1_TEST

LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 ADDC_16_1 OUT_16
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 ADDC_16_1 OUT_16
LIT PUSH 1 PUSH 0 PUSH 0 PUSH 0 ADDC_16_1 OUT_16
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 15 ADDC_16_1 OUT_16

RET


# ==============================================
# SUB_8_4: Subtract a one digit number from a two digit number
# Output Should be 31,30,26,2,15,255

@SUB_8_4_TEST
LIT PUSH 1 PUSH 15 PUSH 0 SUB_8_4 OUT_8
LIT PUSH 1 PUSH 15 PUSH 1 SUB_8_4 OUT_8
LIT PUSH 1 PUSH 15 PUSH 5 SUB_8_4 OUT_8
LIT PUSH 1 PUSH 1 PUSH 15 SUB_8_4 OUT_8
LIT PUSH 1 PUSH 1 PUSH 2 SUB_8_4 OUT_8
LIT PUSH 0 PUSH 1 PUSH 2 SUB_8_4 OUT_8

RET


# ==============================================
# SUB_8_8: Subtract a two-digit number from a two-digit number
# Output should be 0, 15, 12, 16, 13, 254, 4, 5, 255

@SUB_8_8_TEST
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 SUB_8_8 OUT_8 SUB PUSH OUT
LIT PUSH 0 PUSH 15 PUSH 0 PUSH 0 SUB_8_8 OUT_8 SUB PUSH OUT
LIT PUSH 0 PUSH 15 PUSH 0 PUSH 3 SUB_8_8 OUT_8 SUB PUSH OUT
LIT PUSH 1 PUSH 0 PUSH 0 PUSH 0 SUB_8_8 OUT_8 SUB PUSH OUT
LIT PUSH 1 PUSH 0 PUSH 0 PUSH 3 SUB_8_8 OUT_8 SUB PUSH OUT
LIT PUSH 0 PUSH 3 PUSH 0 PUSH 5 SUB_8_8 OUT_8 SUB PUSH OUT
LIT PUSH 0 PUSH 3 PUSH 15 PUSH 15 SUB_8_8 OUT_8 SUB PUSH OUT

LIT PUSH 0 PUSH 15 PUSH 0 PUSH 10 SUB_8_8 OUT_8 SUB PUSH OUT
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 SUB_8_8 OUT_8 SUB PUSH OUT
LIT PUSH 15 PUSH 2 PUSH 7 PUSH 2 SUB_8_8 OUT_8 SUB PUSH OUT


RET


# ==============================================
# SUB_12_4 : Subtract a 1-digit number from a 3-digit number
# Output should be 0, 4094, 4095, 2588, 14

@SUB_12_4_TEST

LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 SUB_12_4 OUT_12
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 1 SUB_12_4 OUT_12
LIT PUSH 0 PUSH 0 PUSH 7 PUSH 8 SUB_12_4 OUT_12
LIT PUSH 10 PUSH 2 PUSH 4 PUSH 8 SUB_12_4 OUT_12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 1 SUB_12_4 OUT_12

RET


# ==============================================
# SUB_12_12 : Subtract a 3-digit number from a 3-digit number
# Output should be 15, 14, 0, 4095, 434

@SUB_12_12_TEST
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 0 PUSH 0 PUSH 0 SUB_12_12 OUT_12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 0 PUSH 0 PUSH 1 SUB_12_12 OUT_12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 0 PUSH 0 PUSH 15 SUB_12_12 OUT_12
LIT PUSH 0 PUSH 0 PUSH 14 PUSH 0 PUSH 0 PUSH 15 SUB_12_12 OUT_12
LIT PUSH 1 PUSH 10 PUSH 4 PUSH 15 PUSH 15 PUSH 2 SUB_12_12 OUT_12

RET

# ==============================================
# MULT : Multiplies two one-digit numbers
# Output should be 0, 0, 0, 1, 6, 16, 225

@MULT_4_4_TEST

LIT PUSH 0 PUSH 0 MULT_4_4 OUT_8
LIT PUSH 0 PUSH 1 MULT_4_4 OUT_8
LIT PUSH 1 PUSH 0 MULT_4_4 OUT_8
LIT PUSH 1 PUSH 1 MULT_4_4 OUT_8
LIT PUSH 2 PUSH 3 MULT_4_4 OUT_8
LIT PUSH 4 PUSH 4 MULT_4_4 OUT_8
LIT PUSH 15 PUSH 15 MULT_4_4 OUT_8

RET


# ==============================================
# MULT_8_8 : Multiplies two two-digit numbers
# Output should be 0, 0, 0, 1, 6, 30, 30, 225, 512, 11592, 65025
# MULT_8_8 also proves a working MULT21
@MULT_8_8_TEST

LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 MULT_8_8 OUT_16
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 MULT_8_8 OUT_16
LIT PUSH 0 PUSH 1 PUSH 0 PUSH 0 MULT_8_8 OUT_16
LIT PUSH 0 PUSH 1 PUSH 0 PUSH 1 MULT_8_8 OUT_16

LIT PUSH 0 PUSH 2 PUSH 0 PUSH 3 MULT_8_8 OUT_16
LIT PUSH 0 PUSH 2 PUSH 0 PUSH 15 MULT_8_8 OUT_16
LIT PUSH 0 PUSH 15 PUSH 0 PUSH 2 MULT_8_8 OUT_16

LIT PUSH 0 PUSH 15 PUSH 0 PUSH 15 MULT_8_8 OUT_16
LIT PUSH 2 PUSH 0 PUSH 1 PUSH 0 MULT_8_8 OUT_16
LIT PUSH 3 PUSH 8 PUSH 12 PUSH 15 MULT_8_8 OUT_16
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 15 MULT_8_8 OUT_16

RET


# ==============================================
# DIV : Divides two one-digit numbers
# Output should be 15, 1, 4, 2, 1, 0, 0*, 0*, 0
@DIV_4_4_TEST

LIT PUSH 15 PUSH 1 DIV_4_4 OUT
LIT PUSH 1 PUSH 1 DIV_4_4 OUT
LIT PUSH 8 PUSH 2 DIV_4_4 OUT
LIT PUSH 8 PUSH 3 DIV_4_4 OUT
LIT PUSH 8 PUSH 8 DIV_4_4 OUT
LIT PUSH 8 PUSH 9 DIV_4_4 OUT
LIT PUSH 8 PUSH 0 DIV_4_4 OUT
LIT PUSH 0 PUSH 0 DIV_4_4 OUT
LIT PUSH 0 PUSH 8 DIV_4_4 OUT

RET


# ==============================================
# DIV_8_4: Divides a two-digit number by a one-digit number
# Output should be 0,1,255,0,0,8,5,17,21
@DIV_8_4_TEST
LIT PUSH 0 PUSH 0 PUSH 1 DIV_8_4 OUT_8
LIT PUSH 0 PUSH 1 PUSH 1 DIV_8_4 OUT_8
LIT PUSH 15 PUSH 15 PUSH 1 DIV_8_4 OUT_8
LIT PUSH 0 PUSH 1 PUSH 0 DIV_8_4 OUT_8
LIT PUSH 15 PUSH 15 PUSH 0 DIV_8_4 OUT_8
LIT PUSH 1 PUSH 1 PUSH 2 DIV_8_4 OUT_8
LIT PUSH 1 PUSH 1 PUSH 3 DIV_8_4 OUT_8
LIT PUSH 15 PUSH 15 PUSH 15 DIV_8_4 OUT_8
LIT PUSH 9 PUSH 5 PUSH 7 DIV_8_4 OUT_8

RET


# ==============================================
# Divides a two-digit number by a two-digit number
# Output should be 0*,0,1,15,240,5,1

@DIV_8_8_TEST
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 DIV_8_8 OUT_8
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 DIV_8_8 OUT_8
LIT PUSH 0 PUSH 1 PUSH 0 PUSH 1 DIV_8_8 OUT_8
LIT PUSH 0 PUSH 15 PUSH 0 PUSH 1 DIV_8_8 OUT_8
LIT PUSH 15 PUSH 0 PUSH 0 PUSH 1 DIV_8_8 OUT_8
LIT PUSH 10 PUSH 4 PUSH 1 PUSH 12 DIV_8_8 OUT_8
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 15 DIV_8_8 OUT_8
RET


# ==============================================
# Divides a 3-digit number by a 1-digit number
# Output should be 15, 0, 7, 1, 273, 1365, 46

@DIV_12_4_TEST
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 1 DIV_12_4 OUT_12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 0 DIV_12_4 OUT_12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 2 DIV_12_4 OUT_12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 15 DIV_12_4 OUT_12
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 15 DIV_12_4 OUT_12
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 3 DIV_12_4 OUT_12
LIT PUSH 2 PUSH 11 PUSH 3 PUSH 15 DIV_12_4 OUT_12


RET


# ==============================================
# MOD: takes the modulo of two one-digit numbers

@MOD_TEST
LIT PUSH 15 PUSH 0 MOD OUT
LIT PUSH 15 PUSH 1 MOD OUT
LIT PUSH 15 PUSH 2 MOD OUT
LIT PUSH 15 PUSH 3 MOD OUT
LIT PUSH 15 PUSH 4 MOD OUT
LIT PUSH 15 PUSH 5 MOD OUT
LIT PUSH 15 PUSH 6 MOD OUT
LIT PUSH 15 PUSH 7 MOD OUT
LIT PUSH 15 PUSH 8 MOD OUT
LIT PUSH 15 PUSH 9 MOD OUT
LIT PUSH 15 PUSH 10 MOD OUT
LIT PUSH 15 PUSH 11 MOD OUT
LIT PUSH 15 PUSH 12 MOD OUT
LIT PUSH 15 PUSH 13 MOD OUT
LIT PUSH 15 PUSH 14 MOD OUT
LIT PUSH 15 PUSH 15 MOD OUT

LIT PUSH 4 PUSH 6 MOD OUT

RET


# ==============================================
# MOD_8_4: takes the modulo of a two-digit number and a one-digit number
# Output should be 15, 0 , 0 , 1, 3, 2, 7 3
@MOD_8_4_TEST
LIT PUSH 0 PUSH 15 PUSH 0 MOD_8_4 OUT_8
LIT PUSH 0 PUSH 15 PUSH 1 MOD_8_4 OUT_8
LIT PUSH 0 PUSH 15 PUSH 15 MOD_8_4 OUT_8
LIT PUSH 1 PUSH 7 PUSH 2 MOD_8_4 OUT_8
LIT PUSH 1 PUSH 7 PUSH 4 MOD_8_4 OUT_8
LIT PUSH 1 PUSH 7 PUSH 7 MOD_8_4 OUT_8
LIT PUSH 0 PUSH 7 PUSH 10 MOD_8_4 OUT_8
LIT PUSH 15 PUSH 15 PUSH 14 MOD_8_4 OUT_8

RET


# ==============================================
# MOD_8_8: Takes the modulo of two two-digit numbers
# Output should be 0 1 14 3 15
@MOD_8_8_TEST

LIT PUSH 0 PUSH 15 PUSH 0 PUSH 1 MOD_8_8 OUT_8
LIT PUSH 0 PUSH 15 PUSH 0 PUSH 2 MOD_8_8 OUT_8
LIT PUSH 15 PUSH 2 PUSH 7 PUSH 2 MOD_8_8 OUT_8
LIT PUSH 3 PUSH 7 PUSH 1 PUSH 10 MOD_8_8 OUT_8
LIT PUSH 0 PUSH 15 PUSH 15 PUSH 0 MOD_8_8 OUT_8

RET


# ==============================================
# MOD_12_4: Takes the modulo of a 3-digit number and a one-digit number
# Output should be 0, 15, 1, 0, 1, 0
@MOD_12_4_TEST
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 15 MOD_12_4 OUT_12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 0 MOD_12_4 OUT_12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 7 MOD_12_4 OUT_12
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 7 MOD_12_4 OUT_12
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 2 MOD_12_4 OUT_12
LIT PUSH 14 PUSH 3 PUSH 10 PUSH 6 MOD_12_4 OUT_12

RET

# ==============================================
# NEG : Takes the twos complement negation of a 4-bit number
# Remember that 4-bit signed can't actually store an 8
# Output should be :
# 0 15 14 13 12 11 10 9 8
# 0 255 241 240 129 128
# 0 4095 2049 2048
# 0 65535 32769 32768

@NEG_TEST
LIT PUSH 0 NEG_4 OUT
LIT PUSH 1 NEG_4 OUT
LIT PUSH 2 NEG_4 OUT
LIT PUSH 3 NEG_4 OUT
LIT PUSH 4 NEG_4 OUT
LIT PUSH 5 NEG_4 OUT
LIT PUSH 6 NEG_4 OUT
LIT PUSH 7 NEG_4 OUT
LIT PUSH 8 NEG_4 OUT

LIT PUSH_8 0 NEG_8 OUT_8
LIT PUSH_8 1 NEG_8 OUT_8
LIT PUSH_8 15 NEG_8 OUT_8
LIT PUSH_8 16 NEG_8 OUT_8
LIT PUSH_8 127 NEG_8 OUT_8
LIT PUSH_8 128 NEG_8 OUT_8

LIT PUSH_12 0 NEG_12 OUT_12
LIT PUSH_12 1 NEG_12 OUT_12
LIT PUSH_12 2047 NEG_12 OUT_12
LIT PUSH_12 2048 NEG_12 OUT_12

LIT PUSH_16 0 NEG_16 OUT_16
LIT PUSH_16 1 NEG_16 OUT_16
LIT PUSH_16 32767 NEG_16 OUT_16
LIT PUSH_16 32768 NEG_16 OUT_16
RET

@END


