# ==============================================
# Tests for math expansion mnenomics

@START
#CALL >EQUAL3_TEST
#CALL >ADDC4_1_TEST
#CALL >SUB21_TEST
#CALL >SUB22_TEST
#CALL >SUB31_TEST
#CALL >SUB33_TEST
#CALL >MULT_TEST
#CALL >MULT22_TEST
#CALL >DIV_TEST
#CALL >DIV21_TEST
#CALL >DIV22_TEST
#CALL >DIV31_TEST
#CALL >MOD_TEST
#CALL >MOD21_TEST
#CALL >MOD22_TEST
CALL >MOD31_TEST

GOTO >END


# ==============================================
# EQUAL3 : Compares two 3-digit numbers for equality. Returns F if true
# Output should be 15, 15, 15, 0, 0, 15

@EQUAL3_TEST
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 PUSH 0 PUSH 0 EQUAL3 OUT
LIT PUSH 1 PUSH 1 PUSH 1 PUSH 1 PUSH 1 PUSH 1 EQUAL3 OUT
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 15 PUSH 15 PUSH 15 EQUAL3 OUT
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 15 PUSH 15 PUSH 15 EQUAL3 OUT
LIT PUSH 2 PUSH 14 PUSH 7 PUSH 2 PUSH 8 PUSH 15 EQUAL3 OUT
LIT PUSH 2 PUSH 1 PUSH 9 PUSH 2 PUSH 1 PUSH 9 EQUAL3 OUT

RET


# ==============================================
# ADDC4_1 : Adds constant 1 to a 4 digit number on the stack
# Output should be 1, 2, 4097, 0

@ADDC4_1_TEST

LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 ADDC4_1 OUT16
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 ADDC4_1 OUT16
LIT PUSH 1 PUSH 0 PUSH 0 PUSH 0 ADDC4_1 OUT16
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 15 ADDC4_1 OUT16

RET


# ==============================================
# SUB21: Subtract a one digit number from a two digit number
# Output Should be 31,30,26,2,15,255

@SUB21_TEST
LIT PUSH 1 PUSH 15 PUSH 0 SUB21 OUT8
LIT PUSH 1 PUSH 15 PUSH 1 SUB21 OUT8
LIT PUSH 1 PUSH 15 PUSH 5 SUB21 OUT8
LIT PUSH 1 PUSH 1 PUSH 15 SUB21 OUT8
LIT PUSH 1 PUSH 1 PUSH 2 SUB21 OUT8
LIT PUSH 0 PUSH 1 PUSH 2 SUB21 OUT8

RET


# ==============================================
# SUB22: Subtract a two-digit number from a two-digit number
# Output should be 0, 15, 12, 16, 13, 254, 4, 5, 255

@SUB22_TEST
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 SUB22 OUT8 SUB PUSH OUT
LIT PUSH 0 PUSH 15 PUSH 0 PUSH 0 SUB22 OUT8 SUB PUSH OUT
LIT PUSH 0 PUSH 15 PUSH 0 PUSH 3 SUB22 OUT8 SUB PUSH OUT
LIT PUSH 1 PUSH 0 PUSH 0 PUSH 0 SUB22 OUT8 SUB PUSH OUT
LIT PUSH 1 PUSH 0 PUSH 0 PUSH 3 SUB22 OUT8 SUB PUSH OUT
LIT PUSH 0 PUSH 3 PUSH 0 PUSH 5 SUB22 OUT8 SUB PUSH OUT
LIT PUSH 0 PUSH 3 PUSH 15 PUSH 15 SUB22 OUT8 SUB PUSH OUT

LIT PUSH 0 PUSH 15 PUSH 0 PUSH 10 SUB22 OUT8 SUB PUSH OUT
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 SUB22 OUT8 SUB PUSH OUT


RET


# ==============================================
# SUB31 : Subtract a 1-digit number from a 3-digit number
# Output should be 0, 4094, 4095, 2588, 14

@SUB31_TEST

LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 SUB31 OUT12
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 1 SUB31 OUT12
LIT PUSH 0 PUSH 0 PUSH 7 PUSH 8 SUB31 OUT12
LIT PUSH 10 PUSH 2 PUSH 4 PUSH 8 SUB31 OUT12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 1 SUB31 OUT12

RET


# ==============================================
# SUB33 : Subtract a 3-digit number from a 3-digit number
# Output should be 15, 14, 0, 4095, 434

@SUB33_TEST
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 0 PUSH 0 PUSH 0 SUB33 OUT12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 0 PUSH 0 PUSH 1 SUB33 OUT12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 0 PUSH 0 PUSH 15 SUB33 OUT12
LIT PUSH 0 PUSH 0 PUSH 14 PUSH 0 PUSH 0 PUSH 15 SUB33 OUT12
LIT PUSH 1 PUSH 10 PUSH 4 PUSH 15 PUSH 15 PUSH 2 SUB33 OUT12

RET

# ==============================================
# MULT : Multiplies two one-digit numbers
# Output should be 0, 0, 0, 1, 6, 16, 225

@MULT_TEST

LIT PUSH 0 PUSH 0 MULT OUT8
LIT PUSH 0 PUSH 1 MULT OUT8
LIT PUSH 1 PUSH 0 MULT OUT8
LIT PUSH 1 PUSH 1 MULT OUT8
LIT PUSH 2 PUSH 3 MULT OUT8
LIT PUSH 4 PUSH 4 MULT OUT8
LIT PUSH 15 PUSH 15 MULT OUT8

RET


# ==============================================
# MULT22 : Multiplies two two-digit numbers
# Output should be 0, 0, 0, 1, 6, 30, 30, 225, 512, 11592, 65025
# MULT22 also proves a working MULT21
@MULT22_TEST

LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 MULT22 OUT16
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 MULT22 OUT16
LIT PUSH 0 PUSH 1 PUSH 0 PUSH 0 MULT22 OUT16
LIT PUSH 0 PUSH 1 PUSH 0 PUSH 1 MULT22 OUT16

LIT PUSH 0 PUSH 2 PUSH 0 PUSH 3 MULT22 OUT16
LIT PUSH 0 PUSH 2 PUSH 0 PUSH 15 MULT22 OUT16
LIT PUSH 0 PUSH 15 PUSH 0 PUSH 2 MULT22 OUT16

LIT PUSH 0 PUSH 15 PUSH 0 PUSH 15 MULT22 OUT16
LIT PUSH 2 PUSH 0 PUSH 1 PUSH 0 MULT22 OUT16
LIT PUSH 3 PUSH 8 PUSH 12 PUSH 15 MULT22 OUT16
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 15 MULT22 OUT16

RET


# ==============================================
# DIV : Divides two one-digit numbers
# Output should be 15, 1, 4, 2, 1, 0, 0*, 0*, 0
@DIV_TEST

LIT PUSH 15 PUSH 1 DIV OUT
LIT PUSH 1 PUSH 1 DIV OUT
LIT PUSH 8 PUSH 2 DIV OUT
LIT PUSH 8 PUSH 3 DIV OUT
LIT PUSH 8 PUSH 8 DIV OUT
LIT PUSH 8 PUSH 9 DIV OUT
LIT PUSH 8 PUSH 0 DIV OUT
LIT PUSH 0 PUSH 0 DIV OUT
LIT PUSH 0 PUSH 8 DIV OUT

RET


# ==============================================
# DIV21: Divides a two-digit number by a one-digit number
# Output should be 0,1,255,0,0,8,5,17,21
@DIV21_TEST
LIT PUSH 0 PUSH 0 PUSH 1 DIV21 OUT8
LIT PUSH 0 PUSH 1 PUSH 1 DIV21 OUT8
LIT PUSH 15 PUSH 15 PUSH 1 DIV21 OUT8
LIT PUSH 0 PUSH 1 PUSH 0 DIV21 OUT8
LIT PUSH 15 PUSH 15 PUSH 0 DIV21 OUT8
LIT PUSH 1 PUSH 1 PUSH 2 DIV21 OUT8
LIT PUSH 1 PUSH 1 PUSH 3 DIV21 OUT8
LIT PUSH 15 PUSH 15 PUSH 15 DIV21 OUT8
LIT PUSH 9 PUSH 5 PUSH 7 DIV21 OUT8

RET


# ==============================================
# Divides a two-digit number by a two-digit number
# Output should be 0*,0,1,15,240,5,1

@DIV22_TEST
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 0 DIV22 OUT8
LIT PUSH 0 PUSH 0 PUSH 0 PUSH 1 DIV22 OUT8
LIT PUSH 0 PUSH 1 PUSH 0 PUSH 1 DIV22 OUT8
LIT PUSH 0 PUSH 15 PUSH 0 PUSH 1 DIV22 OUT8
LIT PUSH 15 PUSH 0 PUSH 0 PUSH 1 DIV22 OUT8
LIT PUSH 10 PUSH 4 PUSH 1 PUSH 12 DIV22 OUT8
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 15 DIV22 OUT8
RET


# ==============================================
# Divides a 3-digit number by a 1-digit number
# Output should be 15, 0, 7, 1, 273, 1365, 46

@DIV31_TEST
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 1 DIV31 OUT12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 0 DIV31 OUT12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 2 DIV31 OUT12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 15 DIV31 OUT12
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 15 DIV31 OUT12
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 3 DIV31 OUT12
LIT PUSH 2 PUSH 11 PUSH 3 PUSH 15 DIV31 OUT12


RET


# ==============================================
# MOD: takes the modulo of two one-digit numbers

@MOD_TEST
LIT PUSH 15 PUSH 0 MOD OUT
LIT PUSH 15 PUSH 1 MOD OUT
LIT PUSH 15 PUSH 2 MOD OUT
LIT PUSH 15 PUSH 3 MOD OUT
LIT PUSH 15 PUSH 4 MOD OUT
LIT PUSH 15 PUSH 5 MOD OUT
LIT PUSH 15 PUSH 6 MOD OUT
LIT PUSH 15 PUSH 7 MOD OUT
LIT PUSH 15 PUSH 8 MOD OUT
LIT PUSH 15 PUSH 9 MOD OUT
LIT PUSH 15 PUSH 10 MOD OUT
LIT PUSH 15 PUSH 11 MOD OUT
LIT PUSH 15 PUSH 12 MOD OUT
LIT PUSH 15 PUSH 13 MOD OUT
LIT PUSH 15 PUSH 14 MOD OUT
LIT PUSH 15 PUSH 15 MOD OUT

LIT PUSH 4 PUSH 6 MOD OUT

RET


# ==============================================
# MOD21: takes the modulo of a two-digit number and a one-digit number
# Output should be 15, 0 , 0 , 1, 3, 2, 7
@MOD21_TEST
LIT PUSH 0 PUSH 15 PUSH 0 MOD21 OUT8
LIT PUSH 0 PUSH 15 PUSH 1 MOD21 OUT8
LIT PUSH 0 PUSH 15 PUSH 15 MOD21 OUT8
LIT PUSH 1 PUSH 7 PUSH 2 MOD21 OUT8
LIT PUSH 1 PUSH 7 PUSH 4 MOD21 OUT8
LIT PUSH 1 PUSH 7 PUSH 7 MOD21 OUT8
LIT PUSH 0 PUSH 7 PUSH 10 MOD21 OUT8
LIT PUSH 0 PUSH 7 PUSH 10 MOD21 OUT8
LIT PUSH 15 PUSH 15 PUSH 14 MOD21 OUT8

RET


# ==============================================
# MOD22: Takes the modulo of two two-digit numbers
# Output should be 14, 3, 0
@MOD22_TEST

LIT PUSH 15 PUSH 2 PUSH 7 PUSH 2 MOD22 OUT8
LIT PUSH 3 PUSH 7 PUSH 1 PUSH 10 MOD22 OUT8
LIT PUSH 0 PUSH 15 PUSH 15 PUSH 0 MOD22 OUT8

RET


# ==============================================
# MOD31: Takes the modulo of a 3-digit number and a one-digit number
# Output should be 0, 15, 1, 0, 1, 0
@MOD31_TEST
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 15 MOD31 OUT12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 0 MOD31 OUT12
LIT PUSH 0 PUSH 0 PUSH 15 PUSH 7 MOD31 OUT12
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 7 MOD31 OUT12
LIT PUSH 15 PUSH 15 PUSH 15 PUSH 2 MOD31 OUT12
LIT PUSH 14 PUSH 3 PUSH 10 PUSH 6 MOD31 OUT12


RET

@END


